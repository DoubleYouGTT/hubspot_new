% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/schemas.R
\name{hs_create_schema}
\alias{hs_create_schema}
\alias{hs_create_custom_object}
\title{Schema (custom object) create}
\usage{
hs_create_schema(
  name,
  singular_label,
  plural_label,
  properties,
  display_properties,
  required_properties = NULL,
  searchable_properties = NULL,
  associated_objects,
  apikey = hubspot_key_get()
)

hs_create_custom_object(
  name,
  singular_label,
  plural_label,
  properties,
  display_properties,
  required_properties = NULL,
  searchable_properties = NULL,
  associated_objects,
  apikey = hubspot_key_get()
)
}
\arguments{
\item{name}{The schema (custom object) name, using characters only (no numerals).
It's common to use lower case only. Cannot be modified after creation.}

\item{singular_label}{The human-readable object name (label) to use for display in its singular form.
Start with capital letter. Cannot be modified after creation.}

\item{plural_label}{The human-readable object name (label) to use for display in its plural form.
Start with capital letter. Cannot be modified after creation.}

\item{properties}{List of list containing all properties and their related property settings to create.
Use \code{\link{hs_build_property()}} to create a set of properties.}

\item{display_properties}{Vector of property names (must exist within the \code{properties} list)
that are used as display property (like \code{"firstname"}, \code{"lastname"}, \code{"email"}
and \code{"phone"} for a Contact object). The first property in this list will be
the primary display property, all remaining properties will be secondary display properties.
Display properties are commonly those properties that are mostly used or define the gross
of the object.}

\item{required_properties}{Vector of property names (must exist within the \code{properties} list)
that are required to be filled when creating new custom objects. Leave \code{NULL} (default) if no required
fields are needed (the Contact or Company object doesn't have any required properties for example).}

\item{searchable_properties}{Vector of property names (must exist within the \code{properties} list)
that can be searched within. Common to be text based fields, like \code{"firstname"} or \code{"lastname"}
for the Contact object. Leave \code{NULL} (default) if no searchable fields are needed.}

\item{associated_objects}{Vector of object names to associate the custom object with.}

\item{apikey}{API key to work with Hubspot (only used if \code{token_path}
is \code{NULL}). See \code{\link[=hubspot_key_set]{hubspot_key_set()}}.}
}
\value{
List with created or updated schema data (similar as \code{hs_get_schema()}).
}
\description{
Define a new custom object schema, along with its properties and associations.
}
\details{
When a new custom object is created, the HubSpot API requires you to refer to it
through its \code{objectTypeId} or its fully qualified name.
The \code{objectTypeId} is defined as \code{{meta-type}-{object_type_id}},
where the meta-type is always 2 (portal-specific).
The fully qualified name is defined as \code{p{portal_id}_{object_name}}.

The functions in this package use an automatic detection system that automatically
transform a custom object name (without numerals) to the fully qualified name.
When it detects numerals in its object name, it assumes either an \code{objectTypeId}
or fully qualified name is provided and does not transform it to a fully
qualified name using the \code{portal_id}.

To make either the \code{objectTypeId} or fully qualified name yourself, you can store the
returned identifier after creation of a custom object to make the \code{objectTypeId}
or you can use the \code{portal_id} and the name used in its creation.
The \code{portal_id} can be obtained through \code{\link{hs_account_details()[["portalId"]]}}
}
\examples{
\dontrun{
proplist=hs_build_property(
  name = "make",
  label = "Make",
  type = "string",
  field_type = "text",
  description = "The manufacturer of a car"
)
proplist=hs_build_property(
  name = "model",
  label = "Model",
  type = "string",
  field_type = "text",
  description = "The model of a car",
  mainpropertylist = proplist
)
schema <- hs_create_schema(
  name = "car",
  singular_label = "Car",
  plural_label = "Cars",
  properties = proplist,
  display_properties = c("make","model"),
  associated_obects = c("contact","deal")
)
}
}
